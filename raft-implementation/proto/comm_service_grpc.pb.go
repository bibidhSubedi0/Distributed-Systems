// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: comm_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestService_TestThis_FullMethodName = "/comm_services.TestService/TestThis"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	TestThis(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestThis(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, TestService_TestThis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility.
type TestServiceServer interface {
	TestThis(context.Context, *TestRequest) (*TestResponse, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceServer struct{}

func (UnimplementedTestServiceServer) TestThis(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestThis not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}
func (UnimplementedTestServiceServer) testEmbeddedByValue()                     {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	// If the following call pancis, it indicates UnimplementedTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_TestThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_TestThis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestThis(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestThis",
			Handler:    _TestService_TestThis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}

const (
	RequestVoteService_RequestVote_FullMethodName   = "/comm_services.RequestVoteService/RequestVote"
	RequestVoteService_AppendEntries_FullMethodName = "/comm_services.RequestVoteService/AppendEntries"
)

// RequestVoteServiceClient is the client API for RequestVoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequestVoteServiceClient interface {
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriedResponse, error)
}

type requestVoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestVoteServiceClient(cc grpc.ClientConnInterface) RequestVoteServiceClient {
	return &requestVoteServiceClient{cc}
}

func (c *requestVoteServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, RequestVoteService_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestVoteServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntriedResponse)
	err := c.cc.Invoke(ctx, RequestVoteService_AppendEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestVoteServiceServer is the server API for RequestVoteService service.
// All implementations must embed UnimplementedRequestVoteServiceServer
// for forward compatibility.
type RequestVoteServiceServer interface {
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriedResponse, error)
	mustEmbedUnimplementedRequestVoteServiceServer()
}

// UnimplementedRequestVoteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRequestVoteServiceServer struct{}

func (UnimplementedRequestVoteServiceServer) RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRequestVoteServiceServer) AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRequestVoteServiceServer) mustEmbedUnimplementedRequestVoteServiceServer() {}
func (UnimplementedRequestVoteServiceServer) testEmbeddedByValue()                            {}

// UnsafeRequestVoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequestVoteServiceServer will
// result in compilation errors.
type UnsafeRequestVoteServiceServer interface {
	mustEmbedUnimplementedRequestVoteServiceServer()
}

func RegisterRequestVoteServiceServer(s grpc.ServiceRegistrar, srv RequestVoteServiceServer) {
	// If the following call pancis, it indicates UnimplementedRequestVoteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RequestVoteService_ServiceDesc, srv)
}

func _RequestVoteService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestVoteServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestVoteService_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestVoteServiceServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestVoteService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestVoteServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RequestVoteService_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestVoteServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RequestVoteService_ServiceDesc is the grpc.ServiceDesc for RequestVoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequestVoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.RequestVoteService",
	HandlerType: (*RequestVoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _RequestVoteService_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RequestVoteService_AppendEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}

const (
	LogReplicationService_ReplicateLog_FullMethodName = "/comm_services.LogReplicationService/ReplicateLog"
)

// LogReplicationServiceClient is the client API for LogReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogReplicationServiceClient interface {
	ReplicateLog(ctx context.Context, in *ReplicateLogRequest, opts ...grpc.CallOption) (*ReplicateLogResponse, error)
}

type logReplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogReplicationServiceClient(cc grpc.ClientConnInterface) LogReplicationServiceClient {
	return &logReplicationServiceClient{cc}
}

func (c *logReplicationServiceClient) ReplicateLog(ctx context.Context, in *ReplicateLogRequest, opts ...grpc.CallOption) (*ReplicateLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicateLogResponse)
	err := c.cc.Invoke(ctx, LogReplicationService_ReplicateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogReplicationServiceServer is the server API for LogReplicationService service.
// All implementations must embed UnimplementedLogReplicationServiceServer
// for forward compatibility.
type LogReplicationServiceServer interface {
	ReplicateLog(context.Context, *ReplicateLogRequest) (*ReplicateLogResponse, error)
	mustEmbedUnimplementedLogReplicationServiceServer()
}

// UnimplementedLogReplicationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogReplicationServiceServer struct{}

func (UnimplementedLogReplicationServiceServer) ReplicateLog(context.Context, *ReplicateLogRequest) (*ReplicateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateLog not implemented")
}
func (UnimplementedLogReplicationServiceServer) mustEmbedUnimplementedLogReplicationServiceServer() {}
func (UnimplementedLogReplicationServiceServer) testEmbeddedByValue()                               {}

// UnsafeLogReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogReplicationServiceServer will
// result in compilation errors.
type UnsafeLogReplicationServiceServer interface {
	mustEmbedUnimplementedLogReplicationServiceServer()
}

func RegisterLogReplicationServiceServer(s grpc.ServiceRegistrar, srv LogReplicationServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogReplicationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogReplicationService_ServiceDesc, srv)
}

func _LogReplicationService_ReplicateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogReplicationServiceServer).ReplicateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogReplicationService_ReplicateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogReplicationServiceServer).ReplicateLog(ctx, req.(*ReplicateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogReplicationService_ServiceDesc is the grpc.ServiceDesc for LogReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.LogReplicationService",
	HandlerType: (*LogReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateLog",
			Handler:    _LogReplicationService_ReplicateLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}

const (
	InstallSnapshotService_InstallSnapshot_FullMethodName = "/comm_services.InstallSnapshotService/InstallSnapshot"
)

// InstallSnapshotServiceClient is the client API for InstallSnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallSnapshotServiceClient interface {
	InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SnapshotChunk, SnapshotResponse], error)
}

type installSnapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallSnapshotServiceClient(cc grpc.ClientConnInterface) InstallSnapshotServiceClient {
	return &installSnapshotServiceClient{cc}
}

func (c *installSnapshotServiceClient) InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SnapshotChunk, SnapshotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InstallSnapshotService_ServiceDesc.Streams[0], InstallSnapshotService_InstallSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SnapshotChunk, SnapshotResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstallSnapshotService_InstallSnapshotClient = grpc.ClientStreamingClient[SnapshotChunk, SnapshotResponse]

// InstallSnapshotServiceServer is the server API for InstallSnapshotService service.
// All implementations must embed UnimplementedInstallSnapshotServiceServer
// for forward compatibility.
type InstallSnapshotServiceServer interface {
	InstallSnapshot(grpc.ClientStreamingServer[SnapshotChunk, SnapshotResponse]) error
	mustEmbedUnimplementedInstallSnapshotServiceServer()
}

// UnimplementedInstallSnapshotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstallSnapshotServiceServer struct{}

func (UnimplementedInstallSnapshotServiceServer) InstallSnapshot(grpc.ClientStreamingServer[SnapshotChunk, SnapshotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}
func (UnimplementedInstallSnapshotServiceServer) mustEmbedUnimplementedInstallSnapshotServiceServer() {
}
func (UnimplementedInstallSnapshotServiceServer) testEmbeddedByValue() {}

// UnsafeInstallSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallSnapshotServiceServer will
// result in compilation errors.
type UnsafeInstallSnapshotServiceServer interface {
	mustEmbedUnimplementedInstallSnapshotServiceServer()
}

func RegisterInstallSnapshotServiceServer(s grpc.ServiceRegistrar, srv InstallSnapshotServiceServer) {
	// If the following call pancis, it indicates UnimplementedInstallSnapshotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InstallSnapshotService_ServiceDesc, srv)
}

func _InstallSnapshotService_InstallSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InstallSnapshotServiceServer).InstallSnapshot(&grpc.GenericServerStream[SnapshotChunk, SnapshotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InstallSnapshotService_InstallSnapshotServer = grpc.ClientStreamingServer[SnapshotChunk, SnapshotResponse]

// InstallSnapshotService_ServiceDesc is the grpc.ServiceDesc for InstallSnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstallSnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.InstallSnapshotService",
	HandlerType: (*InstallSnapshotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstallSnapshot",
			Handler:       _InstallSnapshotService_InstallSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "comm_service.proto",
}

const (
	ClientRequestService_ClientRequest_FullMethodName = "/comm_services.ClientRequestService/ClientRequest"
)

// ClientRequestServiceClient is the client API for ClientRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientRequestServiceClient interface {
	ClientRequest(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type clientRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRequestServiceClient(cc grpc.ClientConnInterface) ClientRequestServiceClient {
	return &clientRequestServiceClient{cc}
}

func (c *clientRequestServiceClient) ClientRequest(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, ClientRequestService_ClientRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRequestServiceServer is the server API for ClientRequestService service.
// All implementations must embed UnimplementedClientRequestServiceServer
// for forward compatibility.
type ClientRequestServiceServer interface {
	ClientRequest(context.Context, *CommandRequest) (*CommandResponse, error)
	mustEmbedUnimplementedClientRequestServiceServer()
}

// UnimplementedClientRequestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientRequestServiceServer struct{}

func (UnimplementedClientRequestServiceServer) ClientRequest(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequest not implemented")
}
func (UnimplementedClientRequestServiceServer) mustEmbedUnimplementedClientRequestServiceServer() {}
func (UnimplementedClientRequestServiceServer) testEmbeddedByValue()                              {}

// UnsafeClientRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientRequestServiceServer will
// result in compilation errors.
type UnsafeClientRequestServiceServer interface {
	mustEmbedUnimplementedClientRequestServiceServer()
}

func RegisterClientRequestServiceServer(s grpc.ServiceRegistrar, srv ClientRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientRequestService_ServiceDesc, srv)
}

func _ClientRequestService_ClientRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRequestServiceServer).ClientRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientRequestService_ClientRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRequestServiceServer).ClientRequest(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientRequestService_ServiceDesc is the grpc.ServiceDesc for ClientRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.ClientRequestService",
	HandlerType: (*ClientRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRequest",
			Handler:    _ClientRequestService_ClientRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}

const (
	ClusterManagementService_AddServer_FullMethodName    = "/comm_services.ClusterManagementService/AddServer"
	ClusterManagementService_RemoveServer_FullMethodName = "/comm_services.ClusterManagementService/RemoveServer"
)

// ClusterManagementServiceClient is the client API for ClusterManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterManagementServiceClient interface {
	AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*AddServerResponse, error)
	RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*RemoveServerResponse, error)
}

type clusterManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagementServiceClient(cc grpc.ClientConnInterface) ClusterManagementServiceClient {
	return &clusterManagementServiceClient{cc}
}

func (c *clusterManagementServiceClient) AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*AddServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddServerResponse)
	err := c.cc.Invoke(ctx, ClusterManagementService_AddServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementServiceClient) RemoveServer(ctx context.Context, in *RemoveServerRequest, opts ...grpc.CallOption) (*RemoveServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveServerResponse)
	err := c.cc.Invoke(ctx, ClusterManagementService_RemoveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagementServiceServer is the server API for ClusterManagementService service.
// All implementations must embed UnimplementedClusterManagementServiceServer
// for forward compatibility.
type ClusterManagementServiceServer interface {
	AddServer(context.Context, *AddServerRequest) (*AddServerResponse, error)
	RemoveServer(context.Context, *RemoveServerRequest) (*RemoveServerResponse, error)
	mustEmbedUnimplementedClusterManagementServiceServer()
}

// UnimplementedClusterManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterManagementServiceServer struct{}

func (UnimplementedClusterManagementServiceServer) AddServer(context.Context, *AddServerRequest) (*AddServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedClusterManagementServiceServer) RemoveServer(context.Context, *RemoveServerRequest) (*RemoveServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServer not implemented")
}
func (UnimplementedClusterManagementServiceServer) mustEmbedUnimplementedClusterManagementServiceServer() {
}
func (UnimplementedClusterManagementServiceServer) testEmbeddedByValue() {}

// UnsafeClusterManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterManagementServiceServer will
// result in compilation errors.
type UnsafeClusterManagementServiceServer interface {
	mustEmbedUnimplementedClusterManagementServiceServer()
}

func RegisterClusterManagementServiceServer(s grpc.ServiceRegistrar, srv ClusterManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedClusterManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterManagementService_ServiceDesc, srv)
}

func _ClusterManagementService_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServiceServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagementService_AddServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServiceServer).AddServer(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagementService_RemoveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServiceServer).RemoveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagementService_RemoveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServiceServer).RemoveServer(ctx, req.(*RemoveServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterManagementService_ServiceDesc is the grpc.ServiceDesc for ClusterManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.ClusterManagementService",
	HandlerType: (*ClusterManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServer",
			Handler:    _ClusterManagementService_AddServer_Handler,
		},
		{
			MethodName: "RemoveServer",
			Handler:    _ClusterManagementService_RemoveServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}

const (
	StateQueryServic_GetState_FullMethodName = "/comm_services.StateQueryServic/GetState"
)

// StateQueryServicClient is the client API for StateQueryServic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateQueryServicClient interface {
	GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
}

type stateQueryServicClient struct {
	cc grpc.ClientConnInterface
}

func NewStateQueryServicClient(cc grpc.ClientConnInterface) StateQueryServicClient {
	return &stateQueryServicClient{cc}
}

func (c *stateQueryServicClient) GetState(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, StateQueryServic_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateQueryServicServer is the server API for StateQueryServic service.
// All implementations must embed UnimplementedStateQueryServicServer
// for forward compatibility.
type StateQueryServicServer interface {
	GetState(context.Context, *StateRequest) (*StateResponse, error)
	mustEmbedUnimplementedStateQueryServicServer()
}

// UnimplementedStateQueryServicServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStateQueryServicServer struct{}

func (UnimplementedStateQueryServicServer) GetState(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStateQueryServicServer) mustEmbedUnimplementedStateQueryServicServer() {}
func (UnimplementedStateQueryServicServer) testEmbeddedByValue()                          {}

// UnsafeStateQueryServicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateQueryServicServer will
// result in compilation errors.
type UnsafeStateQueryServicServer interface {
	mustEmbedUnimplementedStateQueryServicServer()
}

func RegisterStateQueryServicServer(s grpc.ServiceRegistrar, srv StateQueryServicServer) {
	// If the following call pancis, it indicates UnimplementedStateQueryServicServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StateQueryServic_ServiceDesc, srv)
}

func _StateQueryServic_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateQueryServicServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StateQueryServic_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateQueryServicServer).GetState(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StateQueryServic_ServiceDesc is the grpc.ServiceDesc for StateQueryServic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateQueryServic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comm_services.StateQueryServic",
	HandlerType: (*StateQueryServicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _StateQueryServic_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm_service.proto",
}
