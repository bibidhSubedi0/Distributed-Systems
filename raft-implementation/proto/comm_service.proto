
syntax = "proto3";
package comm_services;
option go_package = "/";


service TestService{
    rpc TestThis(TestRequest) returns (TestResponse) {}
}

message TestRequest{
    string input = 1;
}

message TestResponse{
    string resp = 1;
}

// Stuff I am going to need

// Leader Election services

    // RequestVote
        /*
            Used when candidates request votes from other servers
            Needs to handle term number, candidate ID, last log info
            Returns current term and whether vote was granted
        */
    // AppendEntries
        /*
            Used for heartbeat and log replication
            Contains term, leader ID, previous log info, entries to store, leader's commit index
            Returns current term and success status
        */


service RequestVoteService{
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}

    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriedResponse) {}

}

message RequestVoteRequest{}

message RequestVoteResponse{}

message AppendEntriesRequest{}

message AppendEntriedResponse{}

// Log replication services
    // ReplicateLog
    /*
        For sending log entries from leader to followers
        Handles batching of multiple entries
        Includes consistency check information
    */

service LogReplicationService{
    rpc ReplicateLog(ReplicateLogRequest) returns (ReplicateLogResponse) {}
}
message ReplicateLogRequest{}

message ReplicateLogResponse{}



//  State Transfer Services
    // InstallSnapshot
    /*
        For bringing lagging followers up to date
        Transfers large chunks of state data
        Includes term, leader ID, last included index, and chunk of data
    */


service InstallSnapshotService{
    rpc InstallSnapshot(stream SnapshotChunk) returns (SnapshotResponse) {}
}

message SnapshotChunk{}

message SnapshotResponse{}



// Client Interaction Services
    // ClientRequest
    /*
        Handles client commands/queries
        Forwards to leader if received by follower
        Returns results or leader information
    */

service ClientRequestService{
    rpc ClientRequest(CommandRequest) returns (CommandResponse) {}
}

message CommandRequest{}

message CommandResponse{}




// Cluster Management Services
    // AddServer
    // RemoveServer

    /*
        AddServer RPC
        For dynamic membership changes
        Handles adding new servers to the cluster
        RemoveServer RPC
        For removing servers from the cluster
        Handles graceful departure

    */

service ClusterManagementService{
    rpc AddServer(AddServerRequest) returns (AddServerResponse) {}
    rpc RemoveServer(RemoveServerRequest) returns (RemoveServerResponse) {}
}

message AddServerRequest{}

message AddServerResponse{}

message RemoveServerRequest{}

message RemoveServerResponse{}


// State Query Services
    // GetState
    /*
        GetState RPC
        Returns current role (leader/follower/candidate)
        Current term
        Leader ID
        Commit index
    */

service StateQueryServic{
    rpc GetState(StateRequest) returns (StateResponse) {}
}


message StateRequest{}

message StateResponse{}
